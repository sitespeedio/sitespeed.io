mixin rowHeading(items)
  thead
    tr
      each item in items
        th= item

mixin numberCell(title, number)
  td.number(data-title=title)= number

mixin sizeCell(title, size)
  td.number(data-title=title, data-value= size)= h.size.format(size)

- const crux = pageInfo.data.crux.pageSummary;
- const metrics = {first_contentful_paint:'First Contentful Paint (FCP)', largest_contentful_paint: 'Largest Contentful Paint (LCP)', first_input_delay:'First Input Delay (FID)', cumulative_layout_shift: 'Cumulative Layout Shift (CLS)'}; 
- const experiences = ['loadingExperience','originLoadingExperience'];

small 
  ||Â 
  each experience in experiences
    each formFactor in Object.keys(crux[experience])
      a(href='#' + experience + '-' + formFactor) #{experience} #{formFactor} |
      | &nbsp;|&nbsp;

a#crux
h2 CrUx
p.small Chrome User Experience Report (CrUx) is powered by real user measurement across the public web, aggregated from users who have opted-in to syncing their browsing history, have not set up a Sync passphrase, and have usage statistic reporting enabled and is using Chrome.

p.small The CrUx data has four different buckets (form factor) depending on device: DESKTOP, PHONE, TABLET and ALL. You can choose which data to get with 
  code --crux.formFactor
  | .

each experience in experiences
  if experience === 'loadingExperience' && crux[experience]
    p Over the last 30 days, this is the field data for this page for Chrome users.
  else if crux[experience]
    h4 All pages served from this origin
    p This is a summary of all pages served from this origin over the last 30 days for Chrome users.

  if crux[experience]
    each formFactor in Object.keys(crux[experience])
      if (crux[experience][formFactor] && crux[experience][formFactor].data)
        a(id=experience + '-' + formFactor)
        h3 Form Factor #{formFactor}
        table
          thead
            tr
              th Metric
              th Value
          tbody
            each name, key in metrics
              if crux[experience][formFactor].data.record.metrics[key]
                tr
                  td #{name} 75 percentile
                  td #{key.indexOf('cumulative') > -1 ? crux[experience][formFactor].data.record.metrics[key].percentiles.p75 :  h.time.ms(crux[experience][formFactor].data.record.metrics[key].percentiles.p75)} 
        
        h4 Distribution
        - let FCPs = [Number(get(crux, `${experience}.${formFactor}.data.record.metrics.first_contentful_paint.histogram[0].density`, 0) * 100).toFixed(2), Number(get(crux, `${experience}.${formFactor}.data.record.metrics.first_contentful_paint.histogram[1].density`, 0) * 100).toFixed(2), Number(get(crux, `${experience}.${formFactor}.data.record.metrics.first_contentful_paint.histogram[2].density`, 0)*100).toFixed(2)];

        - let LCPs = [Number(get(crux, `${experience}.${formFactor}.data.record.metrics.largest_contentful_paint.histogram[0].density`, 0) * 100).toFixed(2), Number(get(crux, `${experience}.${formFactor}.data.record.metrics.largest_contentful_paint.histogram[1].density`, 0) * 100).toFixed(2), Number(get(crux, `${experience}.${formFactor}.data.record.metrics.largest_contentful_paint.histogram[2].density`, 0)*100).toFixed(2)];

        - let FIDs = [Number(get(crux, `${experience}.${formFactor}.data.record.metrics.first_input_delay.histogram[0].density`, 0) * 100).toFixed(2), Number(get(crux, `${experience}.${formFactor}.data.record.metrics.first_input_delay.histogram[1].density`, 0) * 100).toFixed(2), Number(get(crux, `${experience}.${formFactor}.data.record.metrics.first_input_delay.histogram[2].density`, 0)*100).toFixed(2)];

        - let CLSs = [Number(get(crux, `${experience}.${formFactor}.data.record.metrics.cumulative_layout_shift.histogram[0].density`, 0) * 100).toFixed(2), Number(get(crux, `${experience}.${formFactor}.data.record.metrics.cumulative_layout_shift.histogram[1].density`, 0) * 100).toFixed(2), Number(get(crux, `${experience}.${formFactor}.data.record.metrics.cumulative_layout_shift.histogram[2].density`, 0)*100).toFixed(2)];

        script(type='text/javascript').
          document.addEventListener("DOMContentLoaded", function() {        
                  const pie = new Chartist.Pie('#chartFCP#{experience + formFactor}', {
                    series: [#{FCPs}],
                    labels: ['Fast: #{FCPs[0]}%', 'Moderate #{FCPs[1]}%', 'Slow: #{FCPs[2]}%']
                  }, {
                    showLabel: false,
                    plugins: [
                      Chartist.plugins.legend(
                         { clickable: false,
                          position: 'bottom'
                        }
                      )
                  ]
                  });

                  const pie2 = new Chartist.Pie('#chartLCP#{experience + formFactor}', {
                    series: [#{LCPs}],
                    labels: ['Fast: #{LCPs[0]}%', 'Moderate #{LCPs[1]}%', 'Slow: #{LCPs[2]}%']
                  }, {
                    showLabel: false,
                    plugins: [
                      Chartist.plugins.legend( 
                        { clickable: false,
                          position: 'bottom'
                        })
                  ]
                  });

                  const pie3 = new Chartist.Pie('#chartFID#{experience + formFactor}', {
                    series: [#{FIDs}],
                    labels: ['Fast: #{FIDs[0]}%', 'Moderate #{FIDs[1]}%', 'Slow: #{FIDs[2]}%']
                  }, {
                    showLabel: false,
                    plugins: [
                      Chartist.plugins.legend(
                        { clickable: false,
                          position: 'bottom'
                        })
                  ]
                  });

                  const pie4 = new Chartist.Pie('#chartCLS#{experience + formFactor}', {
                    series: [#{CLSs}],
                    labels: ['Good: #{CLSs[0]}%', 'Need improvement: #{CLSs[1]}%', 'Poor: #{CLSs[2]}%']
                  }, {
                    showLabel: false,
                    plugins: [
                      Chartist.plugins.legend( 
                        { clickable: false,
                          position: 'bottom'
                        })
                  ]
                  });

          });
        .responsive  
          table
            tr 
              th #{metrics['first_contentful_paint']}
              th #{metrics['largest_contentful_paint']}
              th #{metrics['first_input_delay']} 
              th #{metrics['cumulative_layout_shift']}
            tr 
              td(data-title=metrics['first_contentful_paint'])  
                .ct-chart(id='chartFCP' + experience + formFactor)
              td(data-title=metrics['largest_contentful_paint']) 
                .ct-chart(id='chartLCP' + experience + formFactor)
              td(data-title=metrics['first_input_delay']) 
                .ct-chart(id='chartFID' + experience + formFactor)
              td(data-title=metrics['cumulative_layout_shift']) 
                .ct-chart(id='chartCLS' + experience + formFactor) 