extends ./layout.pug
include _tableMixins

mixin rows(assets, showTiming)
  each asset in assets
    tr
      td.url.assetsurl(data-title='URL')
        a(href=asset.url)= h.shortAsset(asset.url)
        | &nbsp;
        a(href=asset.page + 'index.html') &circlearrowleft;
      +durationCell('last modified',asset.lastModification)
      +durationCell('cache time',asset.cacheTime)
      +kbSizeCell('size', asset.contentSize)
      if showTiming
        +numberCell('timing', asset.timing.toFixed(0))

block content
  include runInfo

  if (assetsBySize)
    - var topLists = ['javascript', 'image', 'css', 'html'];
    - var contentTypeNames = {javascript: 'JavaScript', image: 'image' , css: 'CSS', html : 'HTML'}
    ul
      li.group-item.active Quick links
      each type in topLists
        if (assetsBySize[type] && assetsBySize[type].length > 1)
          li.group-item
            a(href='#' + type) Largest #{contentTypeNames[type]} files
      li.group-item
        a(href='#slowest') Slowest responses

    each type in topLists
      if (assetsBySize[type] && assetsBySize[type].length > 1)
        h3(id=type) Largest #{contentTypeNames[type]} files
        .responsive
          table(data-sortable)
            +rowHeading(['url', 'time since last modified', 'cache time', 'size (kb)'])
            +rows(assetsBySize[type], false)

    h3 Slowest responses
    p These are the assets that took the longest time to download.
    .responsive
      table(data-sortable, id='slowest')
        +rowHeading(['url', 'time since last modified', 'cache time', 'size (kb)', 'timing (ms)'])
        +rows(slowestAssets, true)
