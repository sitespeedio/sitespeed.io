- const browsertime = medianRun ? (pageInfo.data.browsertime ? pageInfo.data.browsertime.pageSummary.browserScripts[medianRun.runIndex - 1]: undefined) : pageInfo.data.browsertime.run 
a
h2 CPU

if browsertime && browsertime.cpu && browsertime.cpu.events        
    p Download the Chrome trace log and drag and drop it into Developer Tools / Performance in Chrome.
    .downloads
        if options.browsertime.chrome && options.browsertime.chrome.timeline
        - const tracePath = 'data/trace-' + (runNumber? runNumber : 1) + '.json.gz'
        a.button.button-download(href=tracePath, download=downloadName + '-timeline.json.gz') Download trace log 

if browsertime && browsertime.cpu && browsertime.cpu.longTasks
  h3 Long Tasks
  p Collected using the Long Task API. A long task is a task that take 50 milliseconds or more.
  if browsertime.cpu.longTasks.tasks > 0 
    table
        tr
            th Type
            th Quantity
            th Total duration (ms)
        tr
            td Long Tasks before First Paint
            td #{browsertime.cpu.longTasks.beforeFirstPaint.tasks}
            td #{browsertime.cpu.longTasks.beforeFirstPaint.totalDuration.toFixed(0)}
        tr
            td Long Tasks before First Contentful Paint
            td #{browsertime.cpu.longTasks.beforeFirstContentfulPaint.tasks}
            td #{browsertime.cpu.longTasks.beforeFirstContentfulPaint.totalDuration.toFixed(0)}
        tr
            td Long Tasks after Load Event End
            td #{browsertime.cpu.longTasks.afterLoadEventEnd.tasks}
            td #{browsertime.cpu.longTasks.afterLoadEventEnd.totalDuration.toFixed(0)}         
        tr
            td Total Long Tasks
            td #{browsertime.cpu.longTasks.tasks}
            td #{browsertime.cpu.longTasks.totalDuration.toFixed(0)}
    
    h4 Individual Long Tasks
    table
        tr
            th name
            th startTime
            th duration
            th containerId
            th containerName
            th containerSrc
            th containerType
            
        each task in browsertime.pageinfo.longTask
            tr
                td #{task.name}
                td #{task.startTime.toFixed(0)}
                td #{task.duration.toFixed(0)}
                td #{task.attribution[0].containerId}
                td #{task.attribution[0].containerName}
                td.url.assetsurl #{task.attribution[0].containerSrc}
                td #{task.attribution[0].containerType}
  else 
    p No long tasks on the page!  

h3 CPU time spent    
p Calculated using Tracium.

.row
  .one-half.column
   if browsertime && browsertime.cpu && browsertime.cpu.categories
     table
       tr
         th(colspan='2') Categories (ms)
       each value, name in browsertime.cpu.categories
         tr
           td #{name}
           td #{value.toFixed(0)}
  .one-half.column
   if browsertime && browsertime.cpu && browsertime.cpu.events
     table
       tr
         th(colspan='2') Events (ms)
       - const cpuEvents = [] 
       - for (let key of Object.keys(browsertime.cpu.events)) {cpuEvents.push({name: key, value: browsertime.cpu.events[key] })}
       - cpuEvents.sort((a,b)=>{return b.value - a.value})   
       each event in cpuEvents
         tr
           td #{event.name}
           td #{event.value.toFixed(0)}

if browsertime && browsertime.cpu && browsertime.cpu.urls && browsertime.cpu.urls.length > 0
    h3 Time spent per request
    table
        tr
            th URL
            th CPU time (ms)
        each data in browsertime.cpu.urls
            tr
                td.url.assetsurl
                    a(href=data.url)= data.url
                td #{data.value.toFixed(0)}

if pageInfo.data.thirdparty
  - const thirdparty = medianRun ? pageInfo.data.thirdparty.pageSummary.runs[medianRun.runIndex - 1] : pageInfo.data.thirdparty.run

  if thirdparty && thirdparty.cpuPerTool  && Object.keys(thirdparty.cpuPerTool).length > 0
      h3 CPU time spent
      table
          tr
              th Tool/domain
              th Time (ms)
          each tool in Object.keys(thirdparty.cpuPerTool)
              tr 
                  td #{tool}
                  td.number #{thirdparty.cpuPerTool[tool].toFixed(1)}
